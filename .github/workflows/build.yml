name: Build

on: [push]

env:
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo

jobs:
###############################################################################
# Build Desktop
###############################################################################
  build_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04, windows-2019]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Submodule update
      shell: bash
      run: |
        git submodule update --init --jobs 4

###############################################################################
# Create Build Environment
###############################################################################

    - name: Create Build Environment [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        echo $GITHUB_WORKSPACE
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV

    - name: Create Build Environment [ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libssl-dev curl libxi-dev libcups2-dev -y
        sudo apt-get install npm fakeroot rpm -y
      
    - name: Create Build Environment [ubuntu-18.04]
      shell: bash
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-7
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
        sudo update-alternatives --set gcc "/usr/bin/gcc-7"

    - name: Create Build Environment [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        echo "OPENSSL_ROOT_DIR=c:\beam-libs\openssl" >> $GITHUB_ENV
        git clone https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git c:/boost_prebuild
        echo "BOOST_ROOT=c:\boost_prebuild" >> $GITHUB_ENV

    - name: Download boost [ubuntu && macos]
      if: matrix.os != 'windows-2019'
      shell: bash
      run: |
        git clone --depth=1 https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git ${{runner.workspace}}/boost_prebuild
        echo "BOOST_INCLUDEDIR=${{runner.workspace}}/boost_prebuild/include" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{runner.workspace}}/boost_prebuild/lib/" >> $GITHUB_ENV
    
    - name: Beam Shader SDK
      shell: bash
      run: |
        WORKSPACE='${{runner.workspace}}'
        WORKSPACE=${WORKSPACE//\\//}
        echo cloning to $WORKSPACE
        git clone --depth=1 https://github.com/BeamMW/shader-sdk.git $WORKSPACE/shader-sdk
        cd $WORKSPACE/shader-sdk
        ./shade init
        echo "BEAM_SHADER_SDK=$WORKSPACE/shader-sdk" >> $GITHUB_ENV
        echo "WASI_SDK_PREFIX=$WORKSPACE/shader-sdk/wasi-sdk-12.0" >> $GITHUB_ENV
        

###############################################################################
# Configure CMake
###############################################################################
    - name: Configure CMake [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        cmake $GITHUB_WORKSPACE -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPIT_USE_STATIC=ON -DBRANCH_NAME=${GITHUB_REF##*/} .

    - name: Configure CMake [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        cmake $GITHUB_WORKSPACE -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPIT_USE_STATIC=ON -DBRANCH_NAME=${GITHUB_REF##*/} .

    - name: Configure CMake [windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_CONFIGURATION_TYPES:STRING=$BUILD_CONFIG -DPIT_USE_STATIC=ON -DPIT_USE_STATIC_RUNTIME=On -DSTATIC_CRT=ON -DBRANCH_NAME=${GITHUB_REF##*/} .

    - name: Save version info
      shell: bash
      run: |
        echo "BEAM_VERSION=$(cat 3rdparty/beam/beam_version.gen)" >> $GITHUB_ENV
        echo "BEAM_TARGET_SUFFIX=-masternet" >> $GITHUB_ENV

###############################################################################
# Build
###############################################################################
    - name: Build [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: cmake --build . --parallel --config $BUILD_TYPE

    - name: Build [ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: make -j$(nproc)

    - name: Build [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cmake --build . --config $BUILD_CONFIG --parallel

###############################################################################
# Test
###############################################################################
    - name: Test [macos-10.15]
      if: matrix.os == 'macos-10.15'
      continue-on-error: false
      run: ctest -C $BUILD_TYPE --verbose

    - name: Test [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      continue-on-error: false
      shell: bash
      run: ctest --verbose

    - name: Test [windows]
      if: matrix.os == 'windows-2019'
      continue-on-error: false
      shell: bash
      run: ctest -C $BUILD_CONFIG --verbose

###############################################################################
# Collect artifacts
###############################################################################
    - name: Import Code-Signing Certificates [macos-10.15]
      if: matrix.os == 'macos-10.15'
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
    - name: Sign the mac binaries [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        codesign --deep --force -v -s "${{secrets.MACOS_SIGN_IDENTITY}}" -o runtime --timestamp remote_helper/git-remote-pit

    - name: Checksum [ubuntu]
      if: matrix.os == 'ubuntu-16.04' || matrix.os =='ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sha256sum remote_helper/git-remote-pit > remote_helper/git-remote-pit${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: Checksum [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        shasum -a 256 remote_helper/git-remote-pit > remote_helper/git-remote-pit${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: Collect [macos-10.15 && ubuntu all]
      shell: bash
      if: matrix.os != 'windows-2019'
      run: |
        mkdir artifacts
        tar -cvf artifacts/pit.tar -C remote_helper git-remote-pit git-remote-pit${{env.BEAM_TARGET_SUFFIX}}-checksum.txt pit-remote.cfg

    - name: Collect [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        mkdir artifacts
        cp remote_helper/${{env.BUILD_CONFIG}}/git-remote-pit.exe artifacts/git-remote-pit.exe
        cp remote_helper/pit-remote.cfg artifacts/pit-remote.cfg

    - name: Collect pdb [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        mkdir pdb
        cp remote_helper/${{env.BUILD_CONFIG}}/git-remote-pit.pdb pdb/git-remote-pit${{env.BEAM_TARGET_SUFFIX}}.pdb

    - name: Checksum [windows]
      if: matrix.os == 'windows-2019'
      run: |
        certUtil -hashfile artifacts/git-remote-pit.exe SHA256 > artifacts/git-remote-pit${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: OS name [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: echo "PLATFORM_NAME=mac" >> $GITHUB_ENV

    - name: OS name [ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: echo "PLATFORM_NAME=linux" >> $GITHUB_ENV

    - name: OS name [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: echo "PLATFORM_NAME=win" >> $GITHUB_ENV

    - name: Download beam artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.INSTALLER_TOKEN}}
        workflow: build.yml
        workflow_conclusion: success
        branch: master
        path: downloads
        repo: BeamMW/beam
          
    - name: Electron root
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-10.15'
      shell: bash
      run: echo "ELECTRON_ROOT=${{runner.workspace}}/pit/ui/electron" >> $GITHUB_ENV

    - name: Build electron [ubuntu all & macos]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-10.15'
      shell: bash
      run: |
        mkdir -p ${{env.ELECTRON_ROOT}}/beam-res/{api,cli}
        tar xvf downloads/${{env.PLATFORM_NAME}}-wallet-api${{env.BEAM_TARGET_SUFFIX}}-*/wallet-api${{env.BEAM_TARGET_SUFFIX}}.tar -C ${{env.ELECTRON_ROOT}}/beam-res/api
        tar xvf downloads/${{env.PLATFORM_NAME}}-beam-node${{env.BEAM_TARGET_SUFFIX}}-*/beam-node${{env.BEAM_TARGET_SUFFIX}}.tar -C ${{env.ELECTRON_ROOT}}/beam-res/cli
        cp downloads/beam-wasm${{env.BEAM_TARGET_SUFFIX}}-*/* ${{env.ELECTRON_ROOT}}/front
        cp shaders/app.wasm ${{env.ELECTRON_ROOT}}/front/assets
        cd ${{env.ELECTRON_ROOT}}
        npm i
        npx electron-forge import
        npm run make

    - name: Prepare artifacts [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        echo "PACKAGE_VERSION=1.0.0" >> $GITHUB_ENV
        mkdir -p installer
        cp ${{env.ELECTRON_ROOT}}/out/make/deb/x64/*.deb installer
        cp ${{env.ELECTRON_ROOT}}/out/make/rpm/x64/*.rpm installer

    - name: Prepare artifacts [macos]
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: |
        echo "PACKAGE_VERSION=1.0.0" >> $GITHUB_ENV
        mkdir -p installer
        ls ${{env.ELECTRON_ROOT}}/out/make/
        cp ${{env.ELECTRON_ROOT}}/out/make/*.dmg installer

###############################################################################
# Upload
###############################################################################
    - uses: actions/upload-artifact@v2
      with:
        name: pit${{env.BEAM_TARGET_SUFFIX}}-${{env.PLATFORM_NAME}}-${{env.PACKAGE_VERSION}}
        path: artifacts/*
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'macos-10.15'
      with:
        name: pit-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}-${{env.PLATFORM_NAME}}
        path: installer/*
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      with:
        name: pit-client${{env.BEAM_TARGET_SUFFIX}}_${{env.PACKAGE_VERSION}}_amd64.deb
        path: installer/*.deb
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      with:
        name: pit-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}.x86_64.rpm
        path: installer/*.rpm
        if-no-files-found: error

###############################################################################
# Upload windows pdb
###############################################################################
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019'
      with:
        name: pit${{env.BEAM_TARGET_SUFFIX}}-pdb-${{env.PACKAGE_VERSION}}
        path: pdb
        if-no-files-found: error
